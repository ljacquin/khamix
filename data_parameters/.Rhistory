dr_level <- paste0(
i18n$t("potential signs of moderate DR detected with a probability of "),
(1 - trunc(100 * proba_dr_level) / 100)
),
dr_level <- paste0(
i18n$t("potential signs of severe or superior DR detected with a probability of "),
(trunc(100 * proba_dr_level) / 100)
)
)
out_dr_txt <- paste0(
i18n$t("Prio Retino+ results : referable diabetic retinopathy detected with a probability of "), (trunc(100 * proba_dr_status) / 100),
i18n$t(" for "), rv$patient_id, ".", i18n$t(" Disease severity:  "), dr_level, ". "
)
if (Maculo_status) {
out_dr_txt <- paste0(
out_dr_txt, i18n$t("Warning: possible presence of maculopathy detected with a probability of "),
(trunc(100 * proba_maculo) / 100)
)
}
dr_color <- c("#FF5050", "#FF5050")[pred_dr_level + 1]
# compute grad classification activation mapping for dr status
out_dr_img <- image_scale(magick::image_read(
compute_grad_cam(
cnn_binary_classifier_1,
prio_retino_list_results$transformed_target_image,
prio_retino_list_results$resized_transformed_target_image,
last_conv_layer_name
) / 255
), "412x412!") %>% image_annotate(i18n$t("Detected areas for diabetic retinopathy and/or maculopathy"),
font = "monospace", color = annotation_color_, size = 12
)
} # end else for pred_dr_status test
prio_retino_list_results$out_orig_dr_img <- image_append(c(out_orig_img, out_dr_img))
prio_retino_list_results$out_orig_dr_img <- magick2cimg(prio_retino_list_results$out_orig_dr_img,
alpha = "flatten"
)
# compute glauco status
proba_glauco_status <- as.numeric(cnn_binary_classifier_5 %>% predict(x_target))
ifelse((proba_glauco_status <= 0.5), glauco_status <- 0, glauco_status <- 1)
if (glauco_status == 0) {
out_glauco_txt <- paste0(
i18n$t("Prio Retino+ results : no visible sign or low-risk suspect for glaucoma (i.e. non referable glaucoma) detected with a probability of "),
(1 - trunc(100 * proba_glauco_status) / 100), i18n$t(" for "), rv$patient_id, "."
)
glauco_color <- "#49DC67"
# make an img output for no glauco
out_glauco_img <- image_scale(magick::image_read(
image_array_resize(prio_retino_list_results$transformed_target_image,
height = img_size_cnn, width = img_size_cnn
) / 255
), "412x412!") %>% image_annotate(i18n$t("No detected areas for glaucoma"),
font = "monospace", color = annotation_color_, size = 12
)
} else {
out_glauco_txt <- paste0(
i18n$t("Prio Retino+ results : referable glaucoma (i.e. true glaucoma, pre-perimetric glaucoma or high-risk suspect) detected with a probability of "),
trunc(100 * proba_glauco_status) / 100, i18n$t(" for "), rv$patient_id, "."
)
glauco_color <- "#FF5050"
# compute grad classification activation mapping for glauco status
out_glauco_img <- image_scale(magick::image_read(
compute_grad_cam(
cnn_binary_classifier_5,
prio_retino_list_results$transformed_target_image,
prio_retino_list_results$resized_transformed_target_image,
last_conv_layer_name
) / 255
), "412x412!") %>% image_annotate(i18n$t("Detected areas for glaucoma"),
font = "monospace", color = annotation_color_, size = 12
)
} # end glauco status computation
prio_retino_list_results$out_orig_glauco_img <- image_append(c(out_orig_img, out_glauco_img))
prio_retino_list_results$out_orig_glauco_img <- magick2cimg(prio_retino_list_results$out_orig_glauco_img,
alpha = "flatten"
)
# test image quality and add warning
ifelse(as.numeric(out_resize_qual$img_qual_score) < img_qual_tresh, img_qual <- 1, img_qual <- 0)
if (!img_qual) {
dr_color <- "#EE9F27"
glauco_color <- "#EE9F27"
img_qual_warning <- i18n$t("Warning: low quality image detected, Prio Retino+ results might be unreliable. ")
out_dr_txt <- paste0(img_qual_warning, out_dr_txt)
out_glauco_txt <- paste0(img_qual_warning, out_glauco_txt)
}
out_dr_prio_retino_txt <- HTML(paste0("<div style='background-color:", dr_color, "'>", out_dr_txt, "</div>"))
out_glauco_prio_retino_txt <- HTML(paste0("<div style='background-color:", glauco_color, "'>", out_glauco_txt, "</div>"))
} else {
if (!pred_other_img_status) {
out_dr_prio_retino_txt <- HTML(paste0("<font color='#0c7683'>", i18n$t("Please reset Prio Retino+ first, then follow these instructions: 1. Select your language, 2. Insert patient identifier and 3. Upload a fundus image."), "</font>"))
out_glauco_prio_retino_txt <- HTML(paste0("<font color='#0c7683'>", i18n$t("Please reset Prio Retino+ first, then follow these instructions: 1. Select your language, 2. Insert patient identifier and 3. Upload a fundus image."), "</font>"))
} else {
out_dr_prio_retino_txt <- HTML(paste0("<font color='#0c7683'>", paste0(i18n$t("Is the uploaded file a fundus image ? "), i18n$t("Please reset Prio Retino+ first, then follow these instructions: 1. Select your language, 2. Insert patient identifier and 3. Upload a fundus image.")), "</font>"))
out_glauco_prio_retino_txt <- HTML(paste0("<font color='#0c7683'>", paste0(i18n$t("Is the uploaded file a fundus image ? "), i18n$t("Please reset Prio Retino+ first, then follow these instructions: 1. Select your language, 2. Insert patient identifier and 3. Upload a fundus image.")), "</font>"))
}
}
prio_retino_list_results$out_dr_prio_retino_txt <- out_dr_prio_retino_txt
prio_retino_list_results$out_glauco_prio_retino_txt <- out_glauco_prio_retino_txt
} else {
browser()
print(1)
prio_retino_list_results$out_dr_prio_retino_txt <- ""
prio_retino_list_results$out_glauco_prio_retino_txt <- ""
print(2)
}
prio_retino_list_results
})
library(shiny); runApp('Documents/gaiha_apps/prio_retino_apps/prio_retino/app_ec2.R')
# Charger les données du Titanic
data("Titanic", package = "datasets")
df <- as.data.frame(Titanic)
# Installation du package si ce n'est pas déjà fait
# install.packages("randomForest")
# Charger la bibliothèque randomForest
library(randomForest)
install.packages("randomForest")
# Charger les données du Titanic
data("Titanic", package = "datasets")
df <- as.data.frame(Titanic)
# Installation du package si ce n'est pas déjà fait
# install.packages("randomForest")
# Charger la bibliothèque randomForest
library(randomForest)
# Convertir la table de contingence en un format adapté à randomForest
df_rf <- as.data.frame(as.table(df))
# Charger les données du Titanic
data("Titanic", package = "datasets")
df <- as.data.frame(Titanic)
# Installation du package si ce n'est pas déjà fait
# install.packages("randomForest")
# Charger la bibliothèque randomForest
library(randomForest)
# Convertir la table de contingence en un format adapté à randomForest
df_rf <- as.data.frame(as.table(df))
# Installer le package si ce n'est pas déjà fait
# install.packages("titanic")
# Charger le package
library(titanic)
data("titanic_train")
# Installer le package si ce n'est pas déjà fait
# install.packages("titanic")
# Charger le package
library(datasets)
# Charger les données du Titanic
data("titanic_train")
df <- titanic_train
# Charger le package
library(datasets)
titanic_train
library(titanicSurvival)
install.packages("library(titanicSurvival)")
load(iris)
load(iris3)
data(iris3)
# Charger les données du Titanic
data("Titanic")
df <- titanic_train
# Installer le package si ce n'est pas déjà fait
# install.packages("titanic")
# Charger le package
library(datasets)
# Charger les données du Titanic
data("Titanic")
df <- titanic_train
# Installer le package si ce n'est pas déjà fait
# install.packages("titanic")
# Charger le package
library(datasets)
# Charger les données du Titanic
data("Titanic")
df <- Titanic
# Installation du package si ce n'est pas déjà fait
# install.packages("randomForest")
# Charger la bibliothèque randomForest
library(randomForest)
# Sélectionner les variables explicatives et la variable cible
X <- df[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
# Charger les données du Titanic
data("Titanic")
df <- as.data.frame(Titanic)
View(df)
# Installer le package si ce n'est pas déjà fait
# install.packages("titanic")
# Charger le package
library(datasets)
# Charger les données du Titanic
data("Titanic")
df <- as.data.frame(Titanic)
# Installation du package si ce n'est pas déjà fait
# install.packages("randomForest")
# Charger la bibliothèque randomForest
library(randomForest)
# Sélectionner les variables explicatives et la variable cible
X <- df[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
# Charger les données mtcars
data(mtcars)
# Installer le package si ce n'est pas déjà fait
# install.packages("randomForest")
# Charger la bibliothèque randomForest
library(randomForest)
# Sélectionner les variables explicatives et la variable cible
X <- mtcars[, c("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")]
y <- mtcars$mpg
# Convertir les variables qualitatives en facteurs
X$vs <- as.factor(X$vs)
X$am <- as.factor(X$am)
X$gear <- as.factor(X$gear)
X$carb <- as.factor(X$carb)
# Entraîner le modèle Random Forest
rf_model <- randomForest(x = X, y = y, ntree = 100, mtry = 3, importance = TRUE)
# Faire des prédictions sur l'ensemble de données d'entraînement (c'est un exemple, en pratique, vous devriez diviser vos données)
y_pred <- predict(rf_model, newdata = X)
# Afficher la précision du modèle
accuracy <- 1 - mean((y_pred - y)^2 / y^2)
cat("Précision du modèle :", accuracy, "\n")
View(mtcars)
shiny::runApp('Documents/gaiha_apps/prio_retino_apps/prio_retino')
reticulate::py_last_error()
shiny::runApp('Documents/gaiha_apps/prio_retino_apps/prio_retino')
tensorflow <- import("tensorflow")
cat("Version TensorFlow:", tensorflow$.__version__, "\n")
tensorflow
tensorflow$.__version__
tensorflow$version
tensorflow$version$VERSION
py_config()
py_available()
py_module_available("cv2")
py_module_available("imquality")
library(survival)
data(survie1, package = "hecmulti")
install.packages("hecmulti")
library(survival)
data(survie1, package = "hecmulti")
library(survival)
# Installer le package survival si ce n'est pas déjà fait
# install.packages("survival")
# Charger le package survival
library(survival)
# Générer un jeu de données factice
set.seed(123)
n <- 100  # Nombre d'observations
time <- rexp(n, rate = 0.02)  # Temps de survie (distribution exponentielle)
status <- sample(0:1, n, replace = TRUE)  # État : 0=censuré, 1=événement
# Créer un dataframe
data <- data.frame(time = time, status = status)
# Afficher les premières lignes du jeu de données
head(data)
View(data)
# Fit du modèle de survie Kaplan-Meier
surv_object <- with(data, Surv(time, status))
km_fit <- survfit(surv_object ~ 1)
# Afficher la fonction de survie Kaplan-Meier
summary(km_fit)
View(data)
install.packages("survminer")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
0.5 * (rchisq(1000, df = 1, ncp = 0) + rchisq(1000, df = 2, ncp = 0))
simulated_rlrt_distribution <- 0.5 * (rchisq(1000, df = 1, ncp = 0)
+ rchisq(1000, df = 2, ncp = 0))
simulated_rlrt_distribution
quantile(simulated_rlrt_distribution, 0.99)
0.5 * (qchisq(0.99, df = 1, ncp = 0) + qchisq(0.99, df = 2, ncp = 0))
simulated_rlrt_distribution <- 0.5 * (rchisq(1e6, df = 1, ncp = 0)
+ rchisq(1e6, df = 2, ncp = 0))
simulated_rlrt_distribution
quantile(simulated_rlrt_distribution, 0.99)
quantile(simulated_rlrt_distribution, 0.999)
quantile(simulated_rlrt_distribution, 1)
sort(rchisq(1e6, df = 1, ncp = 0))
sort(rchisq(1e6, df = 1, ncp = 0), decreasing = FALSE)
sort(c(3,1,2))
quantile(0.5 * (sort(rchisq(1e6, df = 1, ncp = 0))
+ sort(rchisq(1e6, df = 2, ncp = 0))), 0.99)
alpha=0.01
simulated_rlrt_distribution <- 0.5 * (sort(rchisq(1e3, df = 1, ncp = 0))
+ sort(rchisq(1e3, df = 2, ncp = 0)))
rlrt_threshold <- quantile(simulated_rlrt_distribution, 1-alpha)
rlrt_threshold
0.5 * (qchisq(0.99, df = 1, ncp = 0) + qchisq(0.99, df = 2, ncp = 0))
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
rm(list = ls())
library(MASS)
library(stats)
library(data.table)
library(kernlab)
library(cvTools)
library(glmnet)
library(KRMM)
library(randomForest)
library(neuralnet)
library(caret)
library(car)
library(rstudioapi)
library(reticulate)
library(devtools)
options(warn = -1)
options(expressions = 5e5)
memory.limit(size = 8e6)
seed_val_ <- 0
set.seed(seed_val_)
rm(list = ls())
library(MASS)
library(stats)
library(data.table)
library(kernlab)
library(cvTools)
library(glmnet)
library(KRMM)
library(randomForest)
library(neuralnet)
library(caret)
library(car)
library(rstudioapi)
library(reticulate)
library(devtools)
options(warn = -1)
options(expressions = 5e5)
memory.limit(size = 8e6)
seed_val_ <- 0
set.seed(seed_val_)
styler:::style_active_file()
styler:::style_active_file()
setwd("~/Documents/perso/khamix/data_parameters")
setwd("~/Documents/perso/khamix/data_parameters")
n = nrow(fread('phenotypes.txt'))
n
z_u = diag(n)
View(z_u)
fwrite(z_u, file='incidence_polygenic_effects.txt',
row.names = FALSE, col.names = FALSE)
fwrite(z_u, file='incidence_polygenic_effects.txt',
row.names = FALSE, col.names = FALSE, sep =" ")
fread('phenotypes.txt')
nrow(fread('phenotypes.txt'))
x_matrix <- rep(1,nrow(fread('phenotypes.txt')))
View(z_u)
x_matrix <- as.matrix(rep(1,nrow(fread('phenotypes.txt'))))
View(x_matrix)
x_matrix <- rep(1,nrow(fread('phenotypes.txt')))
x_matrix <- rep(1,nrow(fread('phenotypes.txt')))
styler:::style_active_file()
library(data.table)
n = nrow(fread('phenotypes.txt'))
z_u = diag(n)
fwrite(z_u, file='incidence_polygenic_effects.txt',
row.names = FALSE, col.names = FALSE, sep =" ")
z_u = cbind('GID'=1:n, z_u)
View(z_u)
dim(z_u)
x_matrix <- as.data.frame(fread("incidence_fixed_effects.txt"))
View(x_matrix)
x_matrix$GID
z_u = cbind('GID'=x_matrix$GID, z_u)
fwrite(z_u, file='incidence_polygenic_effects.txt',
row.names = FALSE, col.names = FALSE, sep =" ")
View(z_u)
library(data.table)
n = nrow(fread('phenotypes.txt'))
z_u = diag(n)
z_u = cbind('GID'=x_matrix$GID, z_u)
fwrite(z_u, file='incidence_polygenic_effects.txt',
row.names = FALSE, col.names = FALSE, sep =" ")
View(x_matrix)
file.exists("incidence_polygenic_effects.txt")
z_u_matrix <- as.data.frame(fread("incidence_polygenic_effects.txt"))
z_u_matrix <- apply(z_u_matrix, 2, as.numeric)
View(z_u)
View(z_u_matrix)
x_matrix <- as.data.frame(fread("incidence_fixed_effects.txt"))
View(x_matrix)
names(x_matrix)
z_u_matrix <- as.data.frame(fread("incidence_polygenic_effects.txt"))
names(z_u_matrix)
View(z_u_matrix)
View(z_u_matrix)
colnames(z_u_matrix) = c('GID', 1:155)
fwrite(z_u_matrix, file='incidence_polygenic_effects.txt',
row.names = FALSE, col.names = FALSE, sep =" ")
z_u_matrix <- as.data.frame(fread("incidence_polygenic_effects.txt"))
View(z_u_matrix)
colnames(z_u_matrix) = c('GID', 1:155)
fwrite(z_u_matrix, file='incidence_polygenic_effects.txt',
row.names = FALSE, col.names = TRUE, sep =" ")
z_u_matrix <- as.data.frame(fread("incidence_polygenic_effects.txt"))
View(z_u_matrix)
z_u_matrix <- apply(z_u_matrix, 2, as.numeric)
z_u_matrix <- as.data.frame(fread("incidence_polygenic_effects.txt"))
z_u_matrix <- apply(z_u_matrix, 2, as.numeric)
# remove id column
z_u_matrix <- z_u_matrix[, -match("GID", colnames(z_u_matrix))]
z_u_matrix <- diag(1, nrow(fread("phenotypes.txt")))
z_u_matrix <- as.matrix(z_u_matrix)
#----------------#
# load libraries #
#----------------#
library(MASS)
library(Matrix)
library(data.table)
library(matrixcalc)
#-------------------------------#
# read, reformat and write data #
#-------------------------------#
# read fixed effects design without header
if (file.exists("incidence_fixed_effects.txt")) {
x_matrix <- as.data.frame(fread("incidence_fixed_effects.txt"))
x_matrix <- apply(x_matrix, 2, as.numeric)
# remove id column
x_matrix <- x_matrix[, -match("GID", colnames(x_matrix))]
} else {
x_matrix <- rep(1, nrow(fread("phenotypes.txt")))
}
# write fixed effects design matrix
x_matrix <- as.matrix(x_matrix)
write.table(x_matrix,
file = "x_matrix", col.names = FALSE, row.names = FALSE,
sep = " ", quote = FALSE
)
# write.table(ncol(x_matrix),
#   file = "nb_col_x_matrix", col.names = FALSE, row.names = FALSE,
#   sep = " ", quote = FALSE
# )
# read polygenic effects design without header
if (file.exists("incidence_polygenic_effects.txt")) {
z_u_matrix <- as.data.frame(fread("incidence_polygenic_effects.txt"))
z_u_matrix <- apply(z_u_matrix, 2, as.numeric)
# remove id column
z_u_matrix <- z_u_matrix[, -match("GID", colnames(z_u_matrix))]
} else {
z_u_matrix <- diag(1, nrow(fread("phenotypes.txt")))
}
# write polygenic effects design matrix
z_u_matrix <- as.matrix(z_u_matrix)
write.table(z_u_matrix,
file = "z_u_matrix", col.names = FALSE, row.names = FALSE,
sep = " ", quote = FALSE
)
View(x_matrix)
z_u_matrix <- as.data.frame(fread("incidence_polygenic_effects.txt"))
View(z_u_matrix)
x_matrix <- as.data.frame(fread("x_matrix"))
x_matrix <- apply(x_matrix, 2, as.numeric)
View(x_matrix)
getwd()
# get design matrix of fixed effects and its rank
x_matrix <- as.data.frame(fread("x_matrix"))
View(x_matrix)
x_matrix <- apply(x_matrix, 2, as.numeric)
library(MASS)
library(Matrix)
library(EMMREML)
library(data.table)
# get number of observations
y <- scan("phenotypes_trait_name")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
